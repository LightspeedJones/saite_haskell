
==================== FINAL INTERFACE ====================
2018-12-11 20:16:30.664676234 UTC

interface main:Handlers.Produto 8044
  interface hash: 5eb432b9a8c124af6c14865237d4bc73
  ABI hash: 1f0511d51db41c3a873957f024fc2f00
  export-list hash: 42fc1cee5dba4ee6d7586add9382d2c3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a9ab25b9ba686c62f25b0a72d5384c82
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Handlers.Produto.formProduto
  Handlers.Produto.getProdutoR
  Handlers.Produto.postProdutoR
module dependencies: Foundation
package dependencies: aeson-1.3.1.1 aeson-compat-0.3.9
                      ansi-terminal-0.8.2 appar-0.1.4 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 attoparsec-iso8601-1.0.1.0 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.5 base64-bytestring-1.0.0.1
                      basement-0.0.8 binary-0.8.5.1 blaze-builder-0.4.1.0
                      blaze-html-0.9.1.1 blaze-markup-0.8.2.2 bsb-http-chunked-0.0.0.4
                      byteable-0.1.1 byteorder-1.0.4 bytestring-0.10.8.2
                      case-insensitive-1.2.0.11 cereal-0.5.7.0 cipher-aes-0.2.11
                      clientsession-0.9.1.2 colour-2.3.4 conduit-1.3.1
                      conduit-extra-1.3.0 containers-0.5.11.0 cookie-0.4.4
                      cprng-aes-0.6.1 crypto-api-0.13.3 crypto-cipher-types-0.0.9
                      crypto-random-0.0.9 css-text-0.1.3.0 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.5 easy-file-0.2.2
                      email-validate-2.3.2.9 entropy-0.4.1.4 exceptions-0.10.0
                      fast-logger-2.4.11 filepath-1.4.2 ghc-boot-th-8.4.4
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 haskell-src-exts-1.20.3
                      haskell-src-meta-0.8.0.3 http-api-data-0.3.8.1 http-date-0.0.8
                      http-types-0.12.2 http2-1.6.4 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 iproute-1.7.6 lifted-base-0.2.3.12
                      memory-0.14.18 monad-control-1.0.2.3 monad-logger-0.3.30
                      monad-loops-0.4.3 mono-traversable-1.0.9.0 mtl-2.2.2
                      network-2.6.3.6 network-byte-order-0.0.0.0 network-uri-2.6.1.0
                      old-locale-1.0.0.7 old-time-1.1.0.3 parsec-3.1.13.0
                      path-pieces-0.2.1 persistent-2.8.2 persistent-postgresql-2.8.2.0
                      persistent-template-2.5.4 postgresql-libpq-0.9.4.2
                      postgresql-simple-0.5.4.0 pretty-1.1.3.6 primitive-0.6.3.0
                      process-1.6.3.0 psqueues-0.2.7.0 random-1.1 resource-pool-0.2.3.2
                      resourcet-1.2.2 scientific-0.3.6.2 securemem-0.1.10
                      shakespeare-2.0.20 silently-1.2.5 simple-sendfile-0.2.27
                      skein-1.0.9.4 split-0.2.3.3 stm-2.4.5.1 stm-chans-3.0.0.4
                      streaming-commons-0.2.1.0 tagged-0.8.5 tagsoup-0.14.7
                      template-haskell-2.13.0.0 text-1.2.3.1 time-1.8.0.2
                      time-locale-compat-0.1.1.5 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-compat-0.5.1
                      unix-time-0.3.8 unliftio-0.2.8.1 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vault-0.3.1.2 vector-0.12.0.1 vector-algorithms-0.7.0.4 wai-3.2.1.2
                      wai-extra-3.0.24.3 wai-logger-2.3.2 warp-3.2.25 word8-0.1.3
                      xss-sanitize-0.3.6 yesod-1.6.0 yesod-core-1.6.8.1 yesod-form-1.6.3
                      yesod-persistent-1.6.0.1 zlib-0.6.2
orphans: persistent-template-2.5.4:Database.Persist.TH
         aeson-compat-0.3.9:Data.Aeson.Compat colour-2.3.4:Data.Colour
         crypto-api-0.13.3:Crypto.Classes
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         network-2.6.3.6:Network.Socket
         haskell-src-exts-1.20.3:Language.Haskell.Exts.Parser
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         unix-time-0.3.8:Data.UnixTime.Diff
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.4.5.1:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base
                         conduit-1.3.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.5:Data.DList email-validate-2.3.2.9:Text.Email.Parser
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.SrcLoc
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.Syntax
                         iproute-1.7.6:Data.IP.Addr iproute-1.7.6:Data.IP.Range
                         main:Foundation monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.30:Control.Monad.Logger
                         mono-traversable-1.0.9.0:Data.MonoTraversable
                         mono-traversable-1.0.9.0:Data.NonNull
                         mono-traversable-1.0.9.0:Data.Sequences
                         network-uri-2.6.1.0:Network.URI
                         persistent-2.8.2:Database.Persist.Class.PersistConfig
                         persistent-2.8.2:Database.Persist.Class.PersistEntity
                         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.8.2:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.8.2.0:Database.Persist.Postgresql
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         shakespeare-2.0.20:Text.Internal.Css
                         shakespeare-2.0.20:Text.Shakespeare tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         yesod-core-1.6.8.1:Yesod.Core.Class.Handler
                         yesod-core-1.6.8.1:Yesod.Core.Internal.LiteApp
                         yesod-core-1.6.8.1:Yesod.Core.Types
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  blaze-html-0.9.1.1:Text.Blaze.Html fdd818245cad1bbfcedd87b21c62946f
import  -/  blaze-markup-0.8.2.2:Text.Blaze.Internal 7539c43623397f23e7aba6515d74b4b1
import  -/  Foundation 2c4a52fba63687f23bfb7481d87f1c33
  exports: 2ec39b6f0eef3a7e77fa0dc1e1a5f955
  Form 5ab2b75acf51a1319c747d3f22700d00
  Handler 6c4dd6f8ce4e414fd0998dad07d81588
  HomeR 37529f6ab32050a95180101bc2ff4bd2
  Produto 1b5cc0f58c7ece18d3d1d75caf29e590
  Produto b46f56e885581d0817220a9e38e2b40e
  ProdutoR 7f8ea245626d81d7137e8f34f09b7c3c
import  -/  persistent-2.8.2:Database.Persist.Class.PersistStore d817d10fae2ea58eb963d470b8d1ec75
import  -/  text-1.2.3.1:Data.Text cb97f965b33763b648b5393c0517cf50
import  -/  yesod-1.6.0:Yesod 12dd731b07dae980742b80692ae0952f
import  -/  yesod-core-1.6.8.1:Yesod.Core.Class.Yesod b52f2d36e084040c2f01914b6a7090fc
import  -/  yesod-core-1.6.8.1:Yesod.Core.Handler e612adc064f65691fdfb53152b949d63
import  -/  yesod-core-1.6.8.1:Yesod.Core.Widget 876e385706692ff3cccbda9bd1bf970b
import  -/  yesod-form-1.6.3:Yesod.Form.Fields fce68d328b0186733f30816379cd8110
import  -/  yesod-form-1.6.3:Yesod.Form.Functions 3bfc50dd9c7122835a1ae46eb47e08d6
import  -/  yesod-form-1.6.3:Yesod.Form.Types 6d2478116d5a6949e301ceb9ff8a7feb
import  -/  yesod-persistent-1.6.0.1:Yesod.Persist.Core dee21111217fc049e95690a79c442bb0
5c003f81f40b596d8760b30d27854715
  $sareq1_$d~~ ::
    (Foundation.App :: *) GHC.Types.~~ (Foundation.App :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Foundation.App
                   @ Foundation.App
                   @~ <Foundation.App>_N) -}
a4a5dcdc1244583e70e6ced593481077
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Handlers.Produto.$trModule3
                   Handlers.Produto.$trModule1) -}
b301ceee694eabf6f21e23fe87795ac2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Handlers.Produto.$trModule2) -}
97c300f6fd980dc559eb0a0729d748a6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Handlers.Produto"#) -}
b7869548695a6f0d7dcec4940f2355bc
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Handlers.Produto.$trModule4) -}
dc4b8b4d7e8f76ff357b4cd935f7e1a8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6507136a02cbc579c089875446c4ffc0
  formProduto :: Foundation.Form Foundation.Produto
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Handlers.Produto.formProduto1
                  `cast`
                (<Text.Blaze.Html.Html>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((,)
                                  <Yesod.Form.Types.FormResult Foundation.Produto>_N
                                  (Yesod.Core.Types.WidgetFor
                                     (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                               <Foundation.App>_N))
                                     <()>_N)_N)_N)) -}
aa2355d180a4a8a0483d90fb3b5bd9ad
  formProduto1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult Foundation.Produto,
           Yesod.Core.Types.WidgetFor
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler) ()),
          Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)
  {- Arity: 3,
     Unfolding: (Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ Foundation.Produto
                   (Yesod.Core.Types.$fMonadHandlerFor @ Foundation.App)
                   GHC.Types.True
                   Handlers.Produto.formProduto2
                     `cast`
                   (Sym (Yesod.Form.Types.N:AForm[0]
                             <Yesod.Core.Types.HandlerFor Foundation.App>_N
                             <Foundation.Produto>_N))) -}
bd757e37c0988ef6de59ebf92805a27d
  formProduto2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerFor Foundation.App),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerFor
         Foundation.App
         (Yesod.Form.Types.FormResult Foundation.Produto,
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerFor Foundation.App))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerFor Foundation.App))],
          Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U><L,U> -}
39d3e034cd87466a8a7e4cd235571b48
  getProdutoR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,U(U,U(U,U,U,U,U,U,U,U,U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.Produto.getProdutoR1
                  `cast`
                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                      <Foundation.App>_N
                                                                      <Text.Blaze.Html.Html>_R)) -}
e1c8a5033b34bcbaaa5a86caffe8480b
  getProdutoR1 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2, Strictness: <L,U(U,U(U,U,U,U,U,U,U,U,U),U,U)><S,U>,
     Unfolding: (\ (r :: Yesod.Core.Types.HandlerData
                           Foundation.App Foundation.App)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Handlers.Produto.getProdutoR_ds
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N
                            <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(Foundation.Widget, Yesod.Form.Types.Enctype)>_R)
                        s of ds13 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) widget enctype ->
                 Foundation.$fYesodApp49
                   (\ (wd :: Yesod.Core.Types.WidgetData Foundation.App)[OneShot]
                      (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case wd
                           `cast`
                         (Yesod.Core.Types.WidgetData
                            (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                      <Foundation.App>_N)))_R of wild1 { Yesod.Core.Types.WidgetData dt dt1 dt2 dt3 dt4 ->
                    case dt2 of wild2 { Yesod.Core.Types.RunHandlerEnv ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           s1 of ds23 { (#,#) ipv2 ipv3 ->
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv3
                           Handlers.Produto.getProdutoR20
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x' { Yesod.Core.Types.GWData ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'
                           ipv2 of s2# { DEFAULT ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           s2# of ds24 { (#,#) ipv11 ipv12 ->
                    let {
                      eta :: Data.Text.Internal.Text
                      = ds14
                          Foundation.ProdutoR
                            `cast`
                          (Sym (Foundation.D:R:RouteApp0[0]) ; (Yesod.Routes.Class.Route
                                                                  (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                                                            <Foundation.App>_N)))_R)
                          (GHC.Types.[] @ (Data.Text.Internal.Text, Data.Text.Internal.Text))
                    } in
                    let {
                      eta1 :: Text.Blaze.Internal.ChoiceString
                      = Text.Blaze.Internal.Text eta
                    } in
                    let {
                      eta2 :: Text.Blaze.Html.Html
                      = Text.Blaze.Internal.Content @ () eta1 GHC.Tuple.()
                    } in
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv12
                           (Yesod.Core.Types.GWData
                              @ (Yesod.Routes.Class.Route Foundation.App)
                              (\ (ds25 :: Yesod.Routes.Class.Route Foundation.App
                                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                          -> Data.Text.Internal.Text) ->
                               eta2)
                                `cast`
                              (Sym (Yesod.Core.Types.N:Body[0]
                                        <Yesod.Routes.Class.Route Foundation.App>_R))
                              (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                `cast`
                              (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                              (GHC.Base.id
                                 @ [Yesod.Core.Types.Script
                                      (Yesod.Routes.Class.Route Foundation.App)])
                                `cast`
                              (Sym (Yesod.Core.Types.N:UniqueList[0]
                                        <Yesod.Core.Types.Script
                                           (Yesod.Routes.Class.Route Foundation.App)>_R))
                              (GHC.Base.id
                                 @ [Yesod.Core.Types.Stylesheet
                                      (Yesod.Routes.Class.Route Foundation.App)])
                                `cast`
                              (Sym (Yesod.Core.Types.N:UniqueList[0]
                                        <Yesod.Core.Types.Stylesheet
                                           (Yesod.Routes.Class.Route Foundation.App)>_R))
                              (Data.Map.Internal.Tip
                                 @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                 @ ((Yesod.Routes.Class.Route Foundation.App
                                     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                     -> Data.Text.Internal.Text)
                                    -> Data.Text.Internal.Builder.Builder))
                              (GHC.Base.Nothing
                                 @ ((Yesod.Routes.Class.Route Foundation.App
                                     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                     -> Data.Text.Internal.Text)
                                    -> Text.Julius.Javascript))
                              (Yesod.Core.Types.$fIsStringWidgetFor2
                                 @ (Yesod.Routes.Class.Route Foundation.App))
                                `cast`
                              (Sym (Yesod.Core.Types.N:Head[0]
                                        <Yesod.Routes.Class.Route Foundation.App>_R)))
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x'1 { Yesod.Core.Types.GWData ipv13 ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'1
                           ipv11 of s2#1 { DEFAULT ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           s2#1 of ds25 { (#,#) ipv20 ipv21 ->
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv21
                           Handlers.Produto.getProdutoR14
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x'2 { Yesod.Core.Types.GWData ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'2
                           ipv20 of s2#2 { DEFAULT ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           s2#2 of ds26 { (#,#) ipv29 ipv30 ->
                    let {
                      eta3 :: Text.Blaze.Html.Html
                      = case enctype of wild3 {
                          Yesod.Form.Types.UrlEncoded -> Yesod.Form.Types.$fToMarkupEnctype5
                          Yesod.Form.Types.Multipart -> Yesod.Form.Types.$fToMarkupEnctype1 }
                    } in
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv30
                           (Yesod.Core.Types.GWData
                              @ (Yesod.Routes.Class.Route Foundation.App)
                              (\ (ds27 :: Yesod.Routes.Class.Route Foundation.App
                                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                          -> Data.Text.Internal.Text) ->
                               eta3)
                                `cast`
                              (Sym (Yesod.Core.Types.N:Body[0]
                                        <Yesod.Routes.Class.Route Foundation.App>_R))
                              (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                                `cast`
                              (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                              (GHC.Base.id
                                 @ [Yesod.Core.Types.Script
                                      (Yesod.Routes.Class.Route Foundation.App)])
                                `cast`
                              (Sym (Yesod.Core.Types.N:UniqueList[0]
                                        <Yesod.Core.Types.Script
                                           (Yesod.Routes.Class.Route Foundation.App)>_R))
                              (GHC.Base.id
                                 @ [Yesod.Core.Types.Stylesheet
                                      (Yesod.Routes.Class.Route Foundation.App)])
                                `cast`
                              (Sym (Yesod.Core.Types.N:UniqueList[0]
                                        <Yesod.Core.Types.Stylesheet
                                           (Yesod.Routes.Class.Route Foundation.App)>_R))
                              (Data.Map.Internal.Tip
                                 @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                 @ ((Yesod.Routes.Class.Route Foundation.App
                                     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                     -> Data.Text.Internal.Text)
                                    -> Data.Text.Internal.Builder.Builder))
                              (GHC.Base.Nothing
                                 @ ((Yesod.Routes.Class.Route Foundation.App
                                     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                                     -> Data.Text.Internal.Text)
                                    -> Text.Julius.Javascript))
                              (Yesod.Core.Types.$fIsStringWidgetFor2
                                 @ (Yesod.Routes.Class.Route Foundation.App))
                                `cast`
                              (Sym (Yesod.Core.Types.N:Head[0]
                                        <Yesod.Routes.Class.Route Foundation.App>_R)))
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x'3 { Yesod.Core.Types.GWData ipv31 ipv32 ipv33 ipv34 ipv35 ipv36 ipv37 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'3
                           ipv29 of s2#3 { DEFAULT ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           s2#3 of ds27 { (#,#) ipv38 ipv39 ->
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv39
                           Handlers.Produto.getProdutoR8
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x'4 { Yesod.Core.Types.GWData ipv40 ipv41 ipv42 ipv43 ipv44 ipv45 ipv46 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'4
                           ipv38 of s2#4 { DEFAULT ->
                    case (widget
                            `cast`
                          (Yesod.Core.Types.N:WidgetFor[0] <Foundation.App>_N <()>_R)
                            wild1
                              `cast`
                            (Yesod.Core.Types.WidgetData
                               (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                    <Foundation.App>_N))_R)
                           `cast`
                         (GHC.Types.N:IO[0] <()>_R)
                           s2#4 of ds28 { (#,#) ipv47 ipv48 ->
                    case GHC.Prim.readMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           ipv47 of ds29 { (#,#) ipv49 ipv50 ->
                    case Yesod.Core.Types.$fIsStringWidgetFor_$c<>
                           @ (Yesod.Routes.Class.Route
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.WidgetFor Foundation.App)))
                           ipv50
                           Handlers.Produto.getProdutoR2
                             `cast`
                           (Yesod.Core.Types.GWData
                              (Yesod.Routes.Class.Route
                                 (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                           <Foundation.App>_N)))_R)_R of x'5 { Yesod.Core.Types.GWData ipv51 ipv52 ipv53 ipv54 ipv55 ipv56 ipv57 ->
                    case GHC.Prim.writeMutVar#
                           @ GHC.Prim.RealWorld
                           @ (Yesod.Core.Types.GWData
                                (Yesod.Routes.Class.Route
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.WidgetFor Foundation.App))))
                           dt
                           x'5
                           ipv49 of s2#5 { DEFAULT ->
                    (# s2#5, GHC.Tuple.() #) } } } } } } } } } } } } } } } } } } } } })
                     `cast`
                   ((<Yesod.Core.Types.WidgetData Foundation.App>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <()>_R)) ; Sym (Yesod.Core.Types.N:WidgetFor[0]
                                                       <Foundation.App>_N <()>_R))
                   r
                   ipv } }) -}
2058920f5e1b965d0a45eff7352d246f
  getProdutoR10 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.Produto.getProdutoR11) -}
68d6397950cb18af44a3a0934f732988
  getProdutoR11 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.Produto.getProdutoR12) -}
169f9ad173f56dcd48737c2f1d8cd745
  getProdutoR12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Produto.getProdutoR13) -}
82bb996d94d7f7982daed8851af20b1b
  getProdutoR13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\">"#) -}
436d21043d501ee70d97b37786e19957
  getProdutoR14 ::
    Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Foundation.App)
  {- Strictness: m,
     Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   Handlers.Produto.getProdutoR15
                     `cast`
                   (Sym (Yesod.Core.Types.N:Body[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fIsStringWidgetFor2
                      @ (Yesod.Routes.Class.Route Foundation.App))
                     `cast`
                   (Sym (Yesod.Core.Types.N:Head[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))) -}
607b637025e8558013bbdb24b5a233bb
  getProdutoR15 ::
    (Yesod.Routes.Class.Route Foundation.App
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,A>m5,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Yesod.Routes.Class.Route Foundation.App
                            -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                            -> Data.Text.Internal.Text) ->
                 Handlers.Produto.getProdutoR_eta2) -}
ab4befeaa1f1740ac411fe8401454da2
  getProdutoR16 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.Produto.getProdutoR17) -}
6523c052ac17ca026950dc6975f78ef3
  getProdutoR17 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.Produto.getProdutoR18) -}
ee1fbd489dbdf698335ee1a0d4925789
  getProdutoR18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Produto.getProdutoR19) -}
cb99144f82d0dae1944af516b7cb2c55
  getProdutoR19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\" enctype=\""#) -}
0dcf7907238ecaeea94e97ee852c9f98
  getProdutoR2 ::
    Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Foundation.App)
  {- Strictness: m,
     Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   Handlers.Produto.getProdutoR3
                     `cast`
                   (Sym (Yesod.Core.Types.N:Body[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fIsStringWidgetFor2
                      @ (Yesod.Routes.Class.Route Foundation.App))
                     `cast`
                   (Sym (Yesod.Core.Types.N:Head[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))) -}
074b43f3bfc5f0be0f5c0b3eca8f3ba8
  getProdutoR20 ::
    Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Foundation.App)
  {- Strictness: m,
     Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   Handlers.Produto.getProdutoR21
                     `cast`
                   (Sym (Yesod.Core.Types.N:Body[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fIsStringWidgetFor2
                      @ (Yesod.Routes.Class.Route Foundation.App))
                     `cast`
                   (Sym (Yesod.Core.Types.N:Head[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))) -}
845af4d786e36a885ca809693cae9ea3
  getProdutoR21 ::
    (Yesod.Routes.Class.Route Foundation.App
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,A>m5,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Yesod.Routes.Class.Route Foundation.App
                            -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                            -> Data.Text.Internal.Text) ->
                 Handlers.Produto.getProdutoR_eta3) -}
fc3da12c79e15f8a4fd1fefb6162b7ce
  getProdutoR22 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.Produto.getProdutoR23) -}
c5e65e416ed963aaf984b2f3e2e51313
  getProdutoR23 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.Produto.getProdutoR24) -}
d53a8dfa843af60f13cfce9c87e79b2e
  getProdutoR24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Produto.getProdutoR25) -}
c0578fa01f85e2c2b6165a06d9ac0b9c
  getProdutoR25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<form method=\"post\" action=\""#) -}
0c0043f195efb3633d3ab3b54f5b46d9
  getProdutoR3 ::
    (Yesod.Routes.Class.Route Foundation.App
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,A>m5,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Yesod.Routes.Class.Route Foundation.App
                            -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                            -> Data.Text.Internal.Text) ->
                 Handlers.Produto.getProdutoR_eta) -}
eeaff5f729f2447786adad4d615b0555
  getProdutoR4 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.PreEscaped
                   Handlers.Produto.getProdutoR5) -}
9859f8c43a31282515a929a3cde38a46
  getProdutoR5 :: Text.Blaze.Internal.ChoiceString
  {- Strictness: m3,
     Unfolding: (Text.Blaze.Internal.Text
                   Handlers.Produto.getProdutoR6) -}
10728fda1a4f27303d4e363279d615dd
  getProdutoR6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Produto.getProdutoR7) -}
2f8f48f289afa6a39edb49854ea56741
  getProdutoR7 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \<input type=\"submit\" value=\"Cadastrar\">\n\
                 \</form>\n"#) -}
1a84344215316a9ac2978d61d99b8100
  getProdutoR8 ::
    Yesod.Core.Types.GWData (Yesod.Routes.Class.Route Foundation.App)
  {- Strictness: m,
     Unfolding: (Yesod.Core.Types.GWData
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   Handlers.Produto.getProdutoR9
                     `cast`
                   (Sym (Yesod.Core.Types.N:Body[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))
                   (GHC.Base.Nothing @ Yesod.Core.Types.Title)
                     `cast`
                   (Sym (Data.Monoid.N:Last[0]) <Yesod.Core.Types.Title>_N)
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Script
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Script
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (GHC.Base.id
                      @ [Yesod.Core.Types.Stylesheet
                           (Yesod.Routes.Class.Route Foundation.App)])
                     `cast`
                   (Sym (Yesod.Core.Types.N:UniqueList[0]
                             <Yesod.Core.Types.Stylesheet
                                (Yesod.Routes.Class.Route Foundation.App)>_R))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Data.Text.Internal.Builder.Builder))
                   (GHC.Base.Nothing
                      @ ((Yesod.Routes.Class.Route Foundation.App
                          -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                          -> Data.Text.Internal.Text)
                         -> Text.Julius.Javascript))
                   (Yesod.Core.Types.$fIsStringWidgetFor2
                      @ (Yesod.Routes.Class.Route Foundation.App))
                     `cast`
                   (Sym (Yesod.Core.Types.N:Head[0]
                             <Yesod.Routes.Class.Route Foundation.App>_R))) -}
c22c5d3620422325300605415fcffa82
  getProdutoR9 ::
    (Yesod.Routes.Class.Route Foundation.App
     -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
     -> Data.Text.Internal.Text)
    -> Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,A>m5,
     Unfolding: InlineRule (1, True, True)
                (\ (ds13 :: Yesod.Routes.Class.Route Foundation.App
                            -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
                            -> Data.Text.Internal.Text) ->
                 Handlers.Produto.getProdutoR_eta1) -}
8f1ea360687f94b7df47c6f287cebb83
  getProdutoR_ds ::
    Yesod.Core.Types.HandlerFor
      Foundation.App (Foundation.Widget, Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.generateFormPost
                   @ Foundation.Handler
                   @ Foundation.Produto
                   @ Foundation.Widget
                   Foundation.$fRenderMessageAppFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.N:RenderMessage[0]
                             (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                  <Foundation.App>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                      @ Foundation.App)
                   Handlers.Produto.formProduto1
                     `cast`
                   (<Text.Blaze.Html.Html>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((,)
                                     <Yesod.Form.Types.FormResult Foundation.Produto>_N
                                     (Yesod.Core.Types.WidgetFor
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N))
                                        <()>_N)_N)_N))) -}
882b081e4dffaad8259e85a7352eea56
  getProdutoR_eta :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.Produto.getProdutoR4
                   GHC.Tuple.()) -}
0f77506e1eaf67fcc0d5858f8cc915cd
  getProdutoR_eta1 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.Produto.getProdutoR10
                   GHC.Tuple.()) -}
a2e76671b687132c47162bc2b3c9393b
  getProdutoR_eta2 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.Produto.getProdutoR16
                   GHC.Tuple.()) -}
fbb328eaba81c9079fa390b0bf40cc03
  getProdutoR_eta3 :: Text.Blaze.Html.Html
  {- Strictness: m5,
     Unfolding: (Text.Blaze.Internal.Content
                   @ ()
                   Handlers.Produto.getProdutoR22
                   GHC.Tuple.()) -}
0ae50bdc53b38dc060164ec8e6b7285c
  postProdutoR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.Produto.postProdutoR1
                  `cast`
                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                      <Foundation.App>_N
                                                                      <Text.Blaze.Html.Html>_R)) -}
d84cad591bc404441b5754c0a2a30b60
  postProdutoR1 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: (\ (r :: Yesod.Core.Types.HandlerData
                           Foundation.App Foundation.App)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Handlers.Produto.postProdutoR_ds
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N
                            <((Yesod.Form.Types.FormResult Foundation.Produto,
                               Foundation.Widget),
                              Yesod.Form.Types.Enctype)>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <((Yesod.Form.Types.FormResult Foundation.Produto,
                              Foundation.Widget),
                             Yesod.Form.Types.Enctype)>_R)
                        s of ds13 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) ds14 ds15 ->
                 case ds14 of wild1 { (,) res ds16 ->
                 case res of wild2 {
                   DEFAULT
                   -> (Handlers.Produto.postProdutoR3
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N <Text.Blaze.Html.Html>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv
                   Yesod.Form.Types.FormSuccess prod
                   -> case ((Database.Persist.Sql.Run.runSqlPool
                               @ (Yesod.Core.Types.HandlerFor Foundation.App)
                               @ Database.Persist.Sql.Types.Internal.SqlBackend
                               @ (Database.Persist.Class.PersistEntity.Key Foundation.Produto)
                               (Yesod.Core.Types.$fMonadUnliftIOHandlerFor @ Foundation.App)
                               Foundation.$fYesodPersistApp2
                                 `cast`
                               (GHC.Classes.(%,%)
                                  <Database.Persist.Class.PersistStore.IsPersistBackend
                                     Database.Persist.Sql.Types.Internal.SqlBackend>_N
                                  ((Data.Type.Equality.~)
                                     <*>_N
                                     (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0]))
                                     <Database.Persist.Sql.Types.Internal.SqlBackend>_N)_N)_R
                               (Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreWriteSqlBackend_$cinsert
                                  @ (Yesod.Core.Types.HandlerFor Foundation.App)
                                  @ Foundation.Produto
                                  (Yesod.Core.Types.$fMonadIOHandlerFor @ Foundation.App)
                                  Handlers.Produto.postProdutoR2
                                    `cast`
                                  (GHC.Classes.(%,%)
                                     <Database.Persist.Class.PersistEntity.PersistEntity
                                        Foundation.Produto>_N
                                     ((Data.Type.Equality.~)
                                        <*>_N
                                        (Sym (Foundation.D:R:PersistEntityBackendProduto[0]))
                                        (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                                  prod)
                               (case r `cast`
                                     (Yesod.Core.Types.HandlerData
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N))
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N)))_R of wild3 { Yesod.Core.Types.HandlerData ds17 ds18 dt dt1 ->
                                case ds18 of wild4 { Yesod.Core.Types.RunHandlerEnv ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ->
                                case ds22
                                       `cast`
                                     (Sub (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                               <Foundation.App>_N)) of wild5 { Foundation.App ds28 ->
                                ds28 } } }))
                              `cast`
                            (Yesod.Core.Types.N:HandlerFor[0]
                                 <Foundation.App>_N
                                 <Database.Persist.Class.PersistEntity.Key Foundation.Produto>_R)
                              r)
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Database.Persist.Class.PersistEntity.Key Foundation.Produto>_R)
                             ipv of ds17 { (#,#) ipv2 ipv3 ->
                      ((Yesod.Core.Handler.redirect
                          @ (Yesod.Core.Types.HandlerFor Foundation.App)
                          @ (Yesod.Routes.Class.Route Foundation.App)
                          @ Text.Blaze.Html.Html
                          (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                             @ Foundation.App)
                          (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                             @ Foundation.App)
                            `cast`
                          (Sym (Yesod.Core.Handler.N:RedirectUrl[0]
                                    (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                         <Foundation.App>_N)
                                    <Yesod.Routes.Class.Route Foundation.App>_N))
                          Foundation.ProdutoR `cast` (Sym (Foundation.D:R:RouteApp0[0])))
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N <Text.Blaze.Html.Html>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0] <Text.Blaze.Html.Html>_R)
                        ipv2 } } } } }) -}
b7c2619fb3089f7c83528da2939353a2
  postProdutoR2 ::
    (Database.Persist.Class.PersistEntity.PersistEntity
       Foundation.Produto,
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
     Data.Type.Equality.~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *))
  {- Strictness: m,
     Unfolding: ((Foundation.$fPersistEntityProduto,
                  Handlers.Produto.postProdutoR_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
b4eef297e921744573d869370def2241
  postProdutoR3 ::
    Yesod.Core.Types.HandlerFor Foundation.App Text.Blaze.Html.Html
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Core.Types.HandlerFor Foundation.App)
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   @ Text.Blaze.Html.Html
                   (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                      @ Foundation.App)
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.App)
                     `cast`
                   (Sym (Yesod.Core.Handler.N:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                  <Foundation.App>_N)
                             <Yesod.Routes.Class.Route Foundation.App>_N))
                   Foundation.HomeR `cast` (Sym (Foundation.D:R:RouteApp0[0]))) -}
d7453db79244eb74d2eff0ab201533c5
  postProdutoR_$d~~ ::
    (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
    GHC.Types.~~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @~ <Database.Persist.Sql.Types.Internal.SqlBackend>_N) -}
3a57f1f619e28f2d816a457f7a30b3d3
  postProdutoR_ds ::
    Yesod.Core.Types.HandlerFor
      Foundation.App
      ((Yesod.Form.Types.FormResult Foundation.Produto,
        Foundation.Widget),
       Yesod.Form.Types.Enctype)
  {- Unfolding: (Yesod.Form.Functions.runFormPost
                   @ Foundation.Handler
                   @ Foundation.Produto
                   @ Foundation.Widget
                   Foundation.$fRenderMessageAppFormMessage_$crenderMessage
                     `cast`
                   (Sym (Text.Shakespeare.I18N.N:RenderMessage[0]
                             (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                  <Foundation.App>_N)
                             <Yesod.Form.Types.FormMessage>_N))
                   (Yesod.Core.Types.$fMonadResourceHandlerFor @ Foundation.App)
                   (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                      @ Foundation.App)
                   Handlers.Produto.formProduto1
                     `cast`
                   (<Text.Blaze.Html.Html>_R
                    ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                                  <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                    Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                    [Text.Shakespeare.I18N.Lang])>_R
                                  <Yesod.Form.Types.Enctype>_N
                                  <Yesod.Form.Types.Ints>_N
                                  <Foundation.Handler>_R
                                  ((,)
                                     <Yesod.Form.Types.FormResult Foundation.Produto>_N
                                     (Yesod.Core.Types.WidgetFor
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N))
                                        <()>_N)_N)_N))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

