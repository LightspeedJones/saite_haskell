
==================== FINAL INTERFACE ====================
2018-12-06 23:02:48.452320096 UTC

interface main:Handlers.Cardapio 8044
  interface hash: bd164a76dbd858d4a9d9564eca80ebd2
  ABI hash: 3bc8f0466bec741cb64492ba5da310ce
  export-list hash: 95b553455109dc20126e23fb7e7e3cfd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b3b1d09742290a21c7d4cc3b0f082b59
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Handlers.Cardapio.formPedido
  Handlers.Cardapio.getCardapioR
  Handlers.Cardapio.getItens
  Handlers.Cardapio.getItensVisitante
  Handlers.Cardapio.postCardapioR
module dependencies: Foundation
package dependencies: aeson-1.3.1.1 aeson-compat-0.3.9
                      ansi-terminal-0.8.2 appar-0.1.4 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 attoparsec-iso8601-1.0.1.0 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.5 base64-bytestring-1.0.0.1
                      basement-0.0.8 binary-0.8.5.1 blaze-builder-0.4.1.0
                      blaze-html-0.9.1.1 blaze-markup-0.8.2.2 bsb-http-chunked-0.0.0.4
                      byteable-0.1.1 byteorder-1.0.4 bytestring-0.10.8.2
                      case-insensitive-1.2.0.11 cereal-0.5.7.0 cipher-aes-0.2.11
                      clientsession-0.9.1.2 colour-2.3.4 conduit-1.3.1
                      conduit-extra-1.3.0 containers-0.5.11.0 cookie-0.4.4
                      cprng-aes-0.6.1 crypto-api-0.13.3 crypto-cipher-types-0.0.9
                      crypto-random-0.0.9 css-text-0.1.3.0 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.5 easy-file-0.2.2
                      email-validate-2.3.2.9 entropy-0.4.1.4 exceptions-0.10.0
                      fast-logger-2.4.11 filepath-1.4.2 ghc-boot-th-8.4.4
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 haskell-src-exts-1.20.3
                      haskell-src-meta-0.8.0.3 http-api-data-0.3.8.1 http-date-0.0.8
                      http-types-0.12.2 http2-1.6.4 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 iproute-1.7.6 lifted-base-0.2.3.12
                      memory-0.14.18 monad-control-1.0.2.3 monad-logger-0.3.30
                      monad-loops-0.4.3 mono-traversable-1.0.9.0 mtl-2.2.2
                      network-2.6.3.6 network-byte-order-0.0.0.0 network-uri-2.6.1.0
                      old-locale-1.0.0.7 old-time-1.1.0.3 parsec-3.1.13.0
                      path-pieces-0.2.1 persistent-2.8.2 persistent-postgresql-2.8.2.0
                      persistent-template-2.5.4 postgresql-libpq-0.9.4.2
                      postgresql-simple-0.5.4.0 pretty-1.1.3.6 primitive-0.6.3.0
                      process-1.6.3.0 psqueues-0.2.7.0 random-1.1 resource-pool-0.2.3.2
                      resourcet-1.2.2 scientific-0.3.6.2 securemem-0.1.10
                      shakespeare-2.0.20 silently-1.2.5 simple-sendfile-0.2.27
                      skein-1.0.9.4 split-0.2.3.3 stm-2.4.5.1 stm-chans-3.0.0.4
                      streaming-commons-0.2.1.0 tagged-0.8.5 tagsoup-0.14.7
                      template-haskell-2.13.0.0 text-1.2.3.1 time-1.8.0.2
                      time-locale-compat-0.1.1.5 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-compat-0.5.1
                      unix-time-0.3.8 unliftio-0.2.8.1 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vault-0.3.1.2 vector-0.12.0.1 vector-algorithms-0.7.0.4 wai-3.2.1.2
                      wai-extra-3.0.24.3 wai-logger-2.3.2 warp-3.2.25 word8-0.1.3
                      xss-sanitize-0.3.6 yesod-1.6.0 yesod-core-1.6.8.1 yesod-form-1.6.3
                      yesod-persistent-1.6.0.1 zlib-0.6.2
orphans: persistent-template-2.5.4:Database.Persist.TH
         aeson-compat-0.3.9:Data.Aeson.Compat colour-2.3.4:Data.Colour
         crypto-api-0.13.3:Crypto.Classes
         basement-0.0.8:Basement.UArray.Base basement-0.0.8:Basement.Block
         network-2.6.3.6:Network.Socket
         haskell-src-exts-1.20.3:Language.Haskell.Exts.Parser
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
         unix-time-0.3.8:Data.UnixTime.Diff stm-2.4.5.1:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         hashable-1.2.7.0:Data.Hashable.Generic
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text.Lazy text-1.2.3.1:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         basement-0.0.8:Basement.Block.Base basement-0.0.8:Basement.Monad
                         basement-0.0.8:Basement.MutableBuilder basement-0.0.8:Basement.Nat
                         basement-0.0.8:Basement.NonEmpty
                         basement-0.0.8:Basement.Numerical.Subtractive
                         basement-0.0.8:Basement.PrimType basement-0.0.8:Basement.String
                         basement-0.0.8:Basement.String.Encoding.ASCII7
                         basement-0.0.8:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.8:Basement.String.Encoding.UTF16
                         basement-0.0.8:Basement.String.Encoding.UTF32
                         basement-0.0.8:Basement.Types.OffsetSize
                         basement-0.0.8:Basement.UArray.Base
                         basement-0.0.8:Basement.UTF8.Base
                         conduit-1.3.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.5:Data.DList email-validate-2.3.2.9:Text.Email.Parser
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.SrcLoc
                         haskell-src-exts-1.20.3:Language.Haskell.Exts.Syntax
                         iproute-1.7.6:Data.IP.Addr iproute-1.7.6:Data.IP.Range
                         main:Foundation monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.30:Control.Monad.Logger
                         mono-traversable-1.0.9.0:Data.MonoTraversable
                         mono-traversable-1.0.9.0:Data.NonNull
                         mono-traversable-1.0.9.0:Data.Sequences
                         network-uri-2.6.1.0:Network.URI
                         persistent-2.8.2:Database.Persist.Class.PersistConfig
                         persistent-2.8.2:Database.Persist.Class.PersistEntity
                         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.8.2:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.8.2.0:Database.Persist.Postgresql
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         shakespeare-2.0.20:Text.Internal.Css
                         shakespeare-2.0.20:Text.Shakespeare tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         yesod-core-1.6.8.1:Yesod.Core.Class.Handler
                         yesod-core-1.6.8.1:Yesod.Core.Internal.LiteApp
                         yesod-core-1.6.8.1:Yesod.Core.Types
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Monoid c40cd435d79b84293ce5503253ee6d44
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  blaze-html-0.9.1.1:Text.Blaze.Html fdd818245cad1bbfcedd87b21c62946f
import  -/  blaze-markup-0.8.2.2:Text.Blaze.Internal 7539c43623397f23e7aba6515d74b4b1
import  -/  Foundation be3d333a75bfa3e86c4ced648f1189de
  exports: 21ec649e8eacf647359bb5bc31157a7f
  CardapioR 5701228622696646861c7e532dee096d
  Form 08004a98fc6f44cd92ebc702149bbee2
  Handler a00ba8e4209ea3bff10df922e701f89f
  HomeR 4b11b15eef3a7328d85f2e676e17b205
  ItemPedido 08292e0f100271df9f48a7757b8fc07b
  LoginR a00d66360aed3f75ab4bc7df22309bfb
  LogoutR 07480751cd1af5c57678bfd6e1bada10
  Pedido b75b67daec891e9d65f4444ac1e65d45
  ProdutoNome c8c503dffdbe8bd68d499a31190061c5
  ProdutoTipoprodutoid 93490de625bff2729fc704b51846280f
  produtoNome 1c6dbe5c095c59a68d5b2ecc6ccb7db3
  produtoValor 1c6dbe5c095c59a68d5b2ecc6ccb7db3
import  -/  monad-logger-0.3.30:Control.Monad.Logger 8543a8ea2bc3183d80bcc2e19c1fd67d
import  -/  persistent-2.8.2:Database.Persist af4ed65f4343bcc501dbe176a498c823
import  -/  persistent-2.8.2:Database.Persist.Class.PersistEntity cb3776dad29a4f5fc118f470e79758bf
import  -/  persistent-2.8.2:Database.Persist.Class.PersistQuery aede4e58c84bf8f4325f3040c2cc653c
import  -/  persistent-2.8.2:Database.Persist.Class.PersistStore d817d10fae2ea58eb963d470b8d1ec75
import  -/  persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore b8938b06580ed6bd3ae2150c649a666d
import  -/  persistent-postgresql-2.8.2.0:Database.Persist.Postgresql 67d2c206a72e3c251d29d480a26581a7
import  -/  shakespeare-2.0.20:Text.Hamlet 492ff1ebebfc64e862ec951f3f2d79f2
import  -/  shakespeare-2.0.20:Text.Internal.Css 17c2e6de13b11d0d8e75d34fa99c9d4a
import  -/  shakespeare-2.0.20:Text.Julius 1d27bc7a7ec71e631eb6a5ef8aa6672b
import  -/  shakespeare-2.0.20:Text.Lucius b430c66fd9a3ba305bfbf21371e6ecf1
import  -/  shakespeare-2.0.20:Text.Shakespeare 4f68e6cb4b84cbd90099c6835f994f47
import  -/  text-1.2.3.1:Data.Text cb97f965b33763b648b5393c0517cf50
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
import  -/  text-1.2.3.1:Data.Text.Internal.Builder c96071c68cafcfa01a11d3f6cdc94f02
import  -/  yesod-1.6.0:Yesod 12dd731b07dae980742b80692ae0952f
import  -/  yesod-core-1.6.8.1:Yesod.Core.Class.Yesod b52f2d36e084040c2f01914b6a7090fc
import  -/  yesod-core-1.6.8.1:Yesod.Core.Handler e612adc064f65691fdfb53152b949d63
import  -/  yesod-core-1.6.8.1:Yesod.Core.Widget 876e385706692ff3cccbda9bd1bf970b
import  -/  yesod-form-1.6.3:Yesod.Form.Fields fce68d328b0186733f30816379cd8110
import  -/  yesod-form-1.6.3:Yesod.Form.Functions 3bfc50dd9c7122835a1ae46eb47e08d6
import  -/  yesod-persistent-1.6.0.1:Yesod.Persist.Core dee21111217fc049e95690a79c442bb0
addDependentFile "templates/cardapio.hamlet" b98df7bd0d7d9edeabf521403d885589
addDependentFile "templates/cardapio.lucius" 9030cc5f7f5f7eafa762a78ebf97bb99
addDependentFile "templates/cardapio.julius" e6ff6fea8f73f88fc42a7fc7c17d57cf
8671368781b2e19a714019a9dd29b81a
  $s$WProdutoNome_$d~~ ::
    (Data.Text.Internal.Text :: *)
    GHC.Types.~~ (Data.Text.Internal.Text :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
c55e21fd0438159efbf606675de6668e
  $s$WProdutoTipoprodutoid_$d~~ ::
    (Database.Persist.Class.PersistEntity.Key
       Foundation.TipoProduto :: *)
    GHC.Types.~~ (Database.Persist.Class.PersistEntity.Key
                    Foundation.TipoProduto :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ (Database.Persist.Class.PersistEntity.Key Foundation.TipoProduto)
                   @ (Database.Persist.Class.PersistEntity.Key Foundation.TipoProduto)
                   @~ <Database.Persist.Class.PersistEntity.Key
                         Foundation.TipoProduto>_N) -}
c44d99bc0808c2a32c3698bc056daf0a
  $sareq1_$d~~ ::
    (Foundation.App :: *) GHC.Types.~~ (Foundation.App :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Foundation.App
                   @ Foundation.App
                   @~ <Foundation.App>_N) -}
6bb948e00ca3af1079e25a9efe4b78bb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Handlers.Cardapio.$trModule3
                   Handlers.Cardapio.$trModule1) -}
b19dd7a55665153361aea7ecf6cc7aa1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Handlers.Cardapio.$trModule2) -}
fe28e1efa2fd4d6dc6b963afeaaa97a5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Handlers.Cardapio"#) -}
d9193e4a00e1f8ddcf8dd6646f7d873e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Handlers.Cardapio.$trModule4) -}
6ab8509fe0f8058ca4e2360d50c3790a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
a41bd7510ad44a59842e702473f61859
  $wds ::
    [Data.Text.Internal.Text]
    -> Foundation.Handler
         (Data.Either.Either
            (Text.Shakespeare.I18N.SomeMessage
               (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
            (GHC.Base.Maybe Data.Text.Internal.Text))
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [Data.Text.Internal.Text]) ->
                 case w of wild {
                   []
                   -> Handlers.Cardapio.formPedido11
                        `cast`
                      ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.Either.Either
                                         (Text.Shakespeare.I18N.SomeMessage
                                            (Yesod.Core.Class.Handler.HandlerSite
                                               Foundation.Handler))
                                         (GHC.Base.Maybe
                                            Data.Text.Internal.Text)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                                     <Foundation.App>_N
                                                                                     <Data.Either.Either
                                                                                        (Text.Shakespeare.I18N.SomeMessage
                                                                                           (Yesod.Core.Class.Handler.HandlerSite
                                                                                              Foundation.Handler))
                                                                                        (GHC.Base.Maybe
                                                                                           Data.Text.Internal.Text)>_R))
                   : ds1 ds2
                   -> case ds1 of wild1 { Data.Text.Internal.Text dt114 dt115 dt116 ->
                      case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt117 dt118 dt119 ->
                      case GHC.Prim.==# dt116 dt119 of lwild {
                        DEFAULT
                        -> let {
                             x :: GHC.Base.Maybe Data.Text.Internal.Text
                             = GHC.Base.Just @ Data.Text.Internal.Text wild1
                           } in
                           let {
                             x1 :: Data.Either.Either
                                     (Text.Shakespeare.I18N.SomeMessage
                                        (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
                                     (GHC.Base.Maybe Data.Text.Internal.Text)
                             = Data.Either.Right
                                 @ (Text.Shakespeare.I18N.SomeMessage
                                      (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
                                 @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                 x
                           } in
                           (\ (eta44 :: Yesod.Core.Types.HandlerData
                                          Foundation.App Foundation.App)
                              (eta45 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            (# eta45, x1 #))
                             `cast`
                           ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Data.Either.Either
                                              (Text.Shakespeare.I18N.SomeMessage
                                                 (Yesod.Core.Class.Handler.HandlerSite
                                                    Foundation.Handler))
                                              (GHC.Base.Maybe
                                                 Data.Text.Internal.Text)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                                          <Foundation.App>_N
                                                                                          <Data.Either.Either
                                                                                             (Text.Shakespeare.I18N.SomeMessage
                                                                                                (Yesod.Core.Class.Handler.HandlerSite
                                                                                                   Foundation.Handler))
                                                                                             (GHC.Base.Maybe
                                                                                                Data.Text.Internal.Text)>_R))
                        1#
                        -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt114
                                  (GHC.Prim.int2Word# dt115)
                                  dt117
                                  (GHC.Prim.int2Word# dt118)
                                  (GHC.Prim.int2Word# dt116)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                           case GHC.Prim.narrow32Int# ds4 of wild3 {
                             DEFAULT
                             -> let {
                                  x :: GHC.Base.Maybe Data.Text.Internal.Text
                                  = GHC.Base.Just @ Data.Text.Internal.Text wild1
                                } in
                                let {
                                  x1 :: Data.Either.Either
                                          (Text.Shakespeare.I18N.SomeMessage
                                             (Yesod.Core.Class.Handler.HandlerSite
                                                Foundation.Handler))
                                          (GHC.Base.Maybe Data.Text.Internal.Text)
                                  = Data.Either.Right
                                      @ (Text.Shakespeare.I18N.SomeMessage
                                           (Yesod.Core.Class.Handler.HandlerSite
                                              Foundation.Handler))
                                      @ (GHC.Base.Maybe Data.Text.Internal.Text)
                                      x
                                } in
                                (\ (eta44 :: Yesod.Core.Types.HandlerData
                                               Foundation.App Foundation.App)
                                   (eta45 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 (# eta45, x1 #))
                                  `cast`
                                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.Either.Either
                                                   (Text.Shakespeare.I18N.SomeMessage
                                                      (Yesod.Core.Class.Handler.HandlerSite
                                                         Foundation.Handler))
                                                   (GHC.Base.Maybe
                                                      Data.Text.Internal.Text)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                                               <Foundation.App>_N
                                                                                               <Data.Either.Either
                                                                                                  (Text.Shakespeare.I18N.SomeMessage
                                                                                                     (Yesod.Core.Class.Handler.HandlerSite
                                                                                                        Foundation.Handler))
                                                                                                  (GHC.Base.Maybe
                                                                                                     Data.Text.Internal.Text)>_R))
                             0#
                             -> Handlers.Cardapio.formPedido11
                                  `cast`
                                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.Either.Either
                                                   (Text.Shakespeare.I18N.SomeMessage
                                                      (Yesod.Core.Class.Handler.HandlerSite
                                                         Foundation.Handler))
                                                   (GHC.Base.Maybe
                                                      Data.Text.Internal.Text)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                                               <Foundation.App>_N
                                                                                               <Data.Either.Either
                                                                                                  (Text.Shakespeare.I18N.SomeMessage
                                                                                                     (Yesod.Core.Class.Handler.HandlerSite
                                                                                                        Foundation.Handler))
                                                                                                  (GHC.Base.Maybe
                                                                                                     Data.Text.Internal.Text)>_R)) } } } } } }) -}
7f6963b6995ee0a86401b3133f435b11
  formPedido ::
    Foundation.Form (Data.Text.Internal.Text, Data.Text.Internal.Text)
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Handlers.Cardapio.formPedido1
                  `cast`
                (<Text.Blaze.Html.Html>_R
                 ->_R Sym (Control.Monad.Trans.RWS.Lazy.N:RWST[0]
                               <(GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
                                 Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
                                 [Text.Shakespeare.I18N.Lang])>_R
                               <Yesod.Form.Types.Enctype>_N
                               <Yesod.Form.Types.Ints>_N
                               <Foundation.Handler>_R
                               ((,)
                                  <Yesod.Form.Types.FormResult
                                     (Data.Text.Internal.Text, Data.Text.Internal.Text)>_N
                                  (Yesod.Core.Types.WidgetFor
                                     (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                               <Foundation.App>_N))
                                     <()>_N)_N)_N)) -}
e93420c8ad5f3ada0d4512478cc7bb7c
  formPedido1 ::
    Text.Blaze.Internal.Markup
    -> (GHC.Base.Maybe
          (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv),
        Yesod.Core.Class.Handler.HandlerSite Foundation.Handler,
        [Text.Shakespeare.I18N.Lang])
    -> Yesod.Form.Types.Ints
    -> Foundation.Handler
         ((Yesod.Form.Types.FormResult
             (Data.Text.Internal.Text, Data.Text.Internal.Text),
           Yesod.Core.Types.WidgetFor
             (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler) ()),
          Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)
  {- Arity: 3,
     Unfolding: (Yesod.Form.Functions.renderDivs2
                   @ Foundation.Handler
                   @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                   (Yesod.Core.Types.$fMonadHandlerFor @ Foundation.App)
                   GHC.Types.True
                   Handlers.Cardapio.formPedido2
                     `cast`
                   (Sym (Yesod.Form.Types.N:AForm[0]
                             <Yesod.Core.Types.HandlerFor Foundation.App>_N
                             <(Data.Text.Internal.Text, Data.Text.Internal.Text)>_N))) -}
146670729bdc312264113503ea37878a
  formPedido10 ::
    [Data.Text.Internal.Text]
    -> [Yesod.Core.Types.FileInfo]
    -> Foundation.Handler
         (Data.Either.Either
            (Text.Shakespeare.I18N.SomeMessage
               (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
            (GHC.Base.Maybe Data.Text.Internal.Text))
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: [Data.Text.Internal.Text])
                   (w1 :: [Yesod.Core.Types.FileInfo]) ->
                 Handlers.Cardapio.$wds w) -}
dbe4a20052476157f816d5abfaf7771b
  formPedido11 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            (Text.Shakespeare.I18N.SomeMessage
               (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler))
            (GHC.Base.Maybe Data.Text.Internal.Text) #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: (\ (eta44 :: Yesod.Core.Types.HandlerData
                               Foundation.App Foundation.App)
                   (eta45 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta45,
                    Yesod.Form.Functions.parseHelperGen1
                      @ Data.Text.Internal.Text
                      @ (Yesod.Core.Class.Handler.HandlerSite Foundation.Handler) #)) -}
0143e652003b1b5edc41dfc32d8a18b3
  formPedido2 ::
    (Yesod.Core.Class.Handler.HandlerSite
       (Yesod.Core.Types.HandlerFor Foundation.App),
     [Data.Text.Internal.Text])
    -> GHC.Base.Maybe (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv)
    -> Yesod.Form.Types.Ints
    -> Yesod.Core.Types.HandlerFor
         Foundation.App
         (Yesod.Form.Types.FormResult
            (Data.Text.Internal.Text, Data.Text.Internal.Text),
          [Yesod.Form.Types.FieldView
             (Yesod.Core.Class.Handler.HandlerSite
                (Yesod.Core.Types.HandlerFor Foundation.App))]
          -> [Yesod.Form.Types.FieldView
                (Yesod.Core.Class.Handler.HandlerSite
                   (Yesod.Core.Types.HandlerFor Foundation.App))],
          Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)
  {- Arity: 3, Strictness: <L,1*U(U,U)><L,U><L,U>,
     Unfolding: (\ (mr :: (Yesod.Core.Class.Handler.HandlerSite
                             (Yesod.Core.Types.HandlerFor Foundation.App),
                           [Data.Text.Internal.Text]))
                   (env :: GHC.Base.Maybe
                             (Yesod.Form.Types.Env, Yesod.Form.Types.FileEnv))
                   (ints :: Yesod.Form.Types.Ints) ->
                 let {
                   ds1 :: Yesod.Core.Types.HandlerFor
                            Foundation.App
                            (Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                             [Yesod.Form.Types.FieldView
                                (Yesod.Core.Class.Handler.HandlerSite
                                   (Yesod.Core.Types.HandlerFor Foundation.App))]
                             -> [Yesod.Form.Types.FieldView
                                   (Yesod.Core.Class.Handler.HandlerSite
                                      (Yesod.Core.Types.HandlerFor Foundation.App))],
                             Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)
                   = case mr of ww { (,) ww1 ww2 ->
                     Yesod.Form.Functions.$wareq
                       @ Foundation.App
                       @ Foundation.Handler
                       @ Data.Text.Internal.Text
                       Foundation.$fRenderMessageAppFormMessage_$crenderMessage
                         `cast`
                       (Sym (Text.Shakespeare.I18N.N:RenderMessage[0]
                                 <Foundation.App>_N <Yesod.Form.Types.FormMessage>_N))
                       Handlers.Cardapio.$sareq1_$d~~
                         `cast`
                       (Sym (Data.Type.Equality.N:~[0]
                                 <*>_N) (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N)) <Foundation.App>_N)
                       (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                          @ Foundation.App)
                       Handlers.Cardapio.formPedido9
                       Handlers.Cardapio.formPedido4
                       (GHC.Base.Nothing @ Data.Text.Internal.Text)
                       ww1
                       ww2
                       env
                       ints }
                 } in
                 (\ (r :: Yesod.Core.Types.HandlerData
                            Foundation.App Foundation.App)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds1
                          `cast`
                        (Yesod.Core.Types.N:HandlerFor[0]
                             <Foundation.App>_N
                             <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                               [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerFor Foundation.App))]
                               -> [Yesod.Form.Types.FieldView
                                     (Yesod.Core.Class.Handler.HandlerSite
                                        (Yesod.Core.Types.HandlerFor Foundation.App))],
                               Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)>_R)
                          r)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <(Yesod.Form.Types.FormResult Data.Text.Internal.Text,
                              [Yesod.Form.Types.FieldView
                                 (Yesod.Core.Class.Handler.HandlerSite
                                    (Yesod.Core.Types.HandlerFor Foundation.App))]
                              -> [Yesod.Form.Types.FieldView
                                    (Yesod.Core.Class.Handler.HandlerSite
                                       (Yesod.Core.Types.HandlerFor Foundation.App))],
                              Yesod.Form.Types.Ints, Yesod.Form.Types.Enctype)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,,,) w2 x y z ->
                  (# ipv,
                     (case w2 of wild1 {
                        Yesod.Form.Types.FormMissing
                        -> Yesod.Form.Types.FormMissing
                             @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                        Yesod.Form.Types.FormFailure errs
                        -> Yesod.Form.Types.FormFailure
                             @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                             errs
                        Yesod.Form.Types.FormSuccess a1
                        -> Yesod.Form.Types.FormSuccess
                             @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                             (a1, Handlers.Cardapio.formPedido_x) },
                      \ (x1 :: [Yesod.Form.Types.FieldView
                                  (Yesod.Core.Class.Handler.HandlerSite
                                     (Yesod.Core.Types.HandlerFor Foundation.App))]) ->
                      x x1,
                      y, z) #) } })
                   `cast`
                 ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(Yesod.Form.Types.FormResult
                                     (Data.Text.Internal.Text, Data.Text.Internal.Text),
                                   [Yesod.Form.Types.FieldView
                                      (Yesod.Core.Class.Handler.HandlerSite
                                         (Yesod.Core.Types.HandlerFor Foundation.App))]
                                   -> [Yesod.Form.Types.FieldView
                                         (Yesod.Core.Class.Handler.HandlerSite
                                            (Yesod.Core.Types.HandlerFor Foundation.App))],
                                   Yesod.Form.Types.Ints,
                                   Yesod.Form.Types.Enctype)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                             <Foundation.App>_N
                                                                             <(Yesod.Form.Types.FormResult
                                                                                 (Data.Text.Internal.Text,
                                                                                  Data.Text.Internal.Text),
                                                                               [Yesod.Form.Types.FieldView
                                                                                  (Yesod.Core.Class.Handler.HandlerSite
                                                                                     (Yesod.Core.Types.HandlerFor
                                                                                        Foundation.App))]
                                                                               -> [Yesod.Form.Types.FieldView
                                                                                     (Yesod.Core.Class.Handler.HandlerSite
                                                                                        (Yesod.Core.Types.HandlerFor
                                                                                           Foundation.App))],
                                                                               Yesod.Form.Types.Ints,
                                                                               Yesod.Form.Types.Enctype)>_R))) -}
fb60624c9e9bc5828ee15b81b16534de
  formPedido3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1"#) -}
fa7f9feeee6107a1074e3d534b1c481e
  formPedido4 :: Yesod.Form.Types.FieldSettings Foundation.App
  {- Strictness: m,
     Unfolding: (Yesod.Form.Types.FieldSettings
                   @ Foundation.App
                   Handlers.Cardapio.formPedido5
                   (GHC.Base.Nothing
                      @ (Text.Shakespeare.I18N.SomeMessage Foundation.App))
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Text.Internal.Text))) -}
095485d2d43522e896e89af41bd6a48a
  formPedido5 :: Text.Shakespeare.I18N.SomeMessage Foundation.App
  {- Unfolding: (Text.Shakespeare.I18N.SomeMessage
                   @ Foundation.App
                   @ Data.Text.Internal.Text
                   (Text.Shakespeare.I18N.$fIsStringSomeMessage_$crenderMessage
                      @ Foundation.App)
                     `cast`
                   (Sym (Text.Shakespeare.I18N.N:RenderMessage[0]
                             <Foundation.App>_N <Data.Text.Internal.Text>_N))
                   Handlers.Cardapio.formPedido6) -}
723c1efbd0b7a3be13549eb8b71604d9
  formPedido6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Handlers.Cardapio.formPedido7 of ds6 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
391ab65aa675219cd9291532d0d2fa79
  formPedido7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s4 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s4 of ds6 { (#,#) ipv ipv1 ->
                 Text.Shakespeare.I18N.$wouter
                   ipv1
                   4#
                   (GHC.CString.unpackCString# Handlers.Cardapio.formPedido8)
                   0#
                   ipv }) -}
f04d2a747c52cbd81639567fb9c23930
  formPedido8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Login"#) -}
001e14bf06e8c2af9a16f7a895848d52
  formPedido9 ::
    Yesod.Form.Types.Field Foundation.Handler Data.Text.Internal.Text
  {- Strictness: m,
     Unfolding: (Yesod.Form.Types.Field
                   @ Foundation.Handler
                   @ Data.Text.Internal.Text
                   Handlers.Cardapio.formPedido10
                   (Yesod.Form.Fields.textField1 @ Foundation.Handler)
                   Yesod.Form.Types.UrlEncoded) -}
e0d352bc08a93d1f368f21e1251174c4
  formPedido_x :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Cardapio.formPedido3) -}
395a22e77bcc30cc64bdc2fcb78f2cd0
  getCardapioR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.Cardapio.getCardapioR1
                  `cast`
                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                      <Foundation.App>_N
                                                                      <Text.Blaze.Html.Html>_R)) -}
440fdc2d354b3438eb3735edfa1bd4f8
  getCardapioR1 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: (\ (r :: Yesod.Core.Types.HandlerData
                           Foundation.App Foundation.App)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Handlers.Cardapio.getCardapioR_ds
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N
                            <GHC.Base.Maybe Data.ByteString.Internal.ByteString>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Base.Maybe Data.ByteString.Internal.ByteString>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> Foundation.$fYesodApp49 Handlers.Cardapio.getCardapioR3 r ipv
                   GHC.Base.Just a1
                   -> Handlers.Cardapio.getCardapioR2
                        (case a1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                         Data.Text.Encoding.$wdecodeUtf8With
                           Data.Text.Encoding.Error.lenientDecode
                           ww1
                           ww2
                           ww3
                           ww4 })
                        r
                        ipv } }) -}
f16a4421529a17f71b3ed000e9c214fa
  getCardapioR2 ::
    Data.Text.Internal.Text
    -> Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 3,
     Strictness: <L,U><L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U> -}
4b757da0293a607427e38125340d3156
  getCardapioR3 :: Yesod.Core.Types.WidgetFor Foundation.App ()
  {- Unfolding: (Yesod.Core.Handler.redirect
                   @ (Yesod.Core.Types.WidgetFor Foundation.App)
                   @ (Yesod.Routes.Class.Route Foundation.App)
                   @ ()
                   (Yesod.Core.Class.Handler.$fMonadHandlerWidgetFor @ Foundation.App)
                   (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                      @ Foundation.App)
                     `cast`
                   (Sym (Yesod.Core.Handler.N:RedirectUrl[0]
                             (Yesod.Core.Class.Handler.D:R:HandlerSiteWidgetFor[0]
                                  <Foundation.App>_N)
                             <Yesod.Routes.Class.Route Foundation.App>_N))
                   Foundation.LoginR `cast` (Sym (Foundation.D:R:RouteApp0[0]))) -}
5e7b79d4905aa03d220e0512fd805303
  getCardapioR4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Cardapio.getCardapioR5) -}
6d91be7874c993b63c813308ccd6cf9f
  getCardapioR5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_NOME"#) -}
cab0fbdbf1861d024ec16f241a12fe63
  getCardapioR_ds ::
    Yesod.Core.Types.HandlerFor
      Foundation.App (GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Unfolding: (Yesod.Core.Handler.lookupSessionBS
                   @ (Yesod.Core.Types.HandlerFor Foundation.App)
                   (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                      @ Foundation.App)
                   Handlers.Cardapio.getCardapioR4) -}
00008563847bc31cc2e5c54480f77ba5
  getItens ::
    Data.Text.Internal.Text -> Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 3,
     Strictness: <L,U><L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.Cardapio.getCardapioR2
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (<Yesod.Core.Types.HandlerData
                          Foundation.App Foundation.App>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                           <Foundation.App>_N
                                                                           <Text.Blaze.Html.Html>_R)) -}
864a7d72ef9a1b4be014c6eedb819e8d
  getItensVisitante :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Handlers.Cardapio.getItensVisitante1
                  `cast`
                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                      <Foundation.App>_N
                                                                      <Text.Blaze.Html.Html>_R)) -}
bfa320cbd13b80ed03d23dee82c0b56c
  getItensVisitante1 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Text.Blaze.Internal.MarkupM () #)
  {- Arity: 2,
     Unfolding: (Foundation.$fYesodApp49
                   Handlers.Cardapio.getCardapioR3) -}
318384a45c95ad417a24bcddf71ec7f1
  postCardapioR :: Foundation.Handler Text.Blaze.Html.Html
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Handlers.Cardapio.postCardapioR1
                  `cast`
                ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                  ->_R Sym (GHC.Types.N:IO[0]
                                <Text.Blaze.Html.Html>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                      <Foundation.App>_N
                                                                      <Text.Blaze.Html.Html>_R)) -}
6ee527cf495a3b92343ccd3fe4631e74
  postCardapioR1 ::
    Yesod.Core.Types.HandlerData Foundation.App Foundation.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Text.Blaze.Html.Html #)
  {- Arity: 2,
     Strictness: <L,U(U,U(U,U,U,U(U(U,U,U(U),U,U(U),U(U,U,U),U)),U,U,U,U,U),U,U)><S,U>,
     Unfolding: (\ (r :: Yesod.Core.Types.HandlerData
                           Foundation.App Foundation.App)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Handlers.Cardapio.postCardapioR_ds
                         `cast`
                       (Yesod.Core.Types.N:HandlerFor[0]
                            <Foundation.App>_N
                            <GHC.Base.Maybe Data.ByteString.Internal.ByteString>_R)
                         r)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <GHC.Base.Maybe Data.ByteString.Internal.ByteString>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case Handlers.Cardapio.postCardapioR14
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Text.Blaze.Html.Html #)
                      of {}
                   GHC.Base.Just a1
                   -> case ((Database.Persist.Sql.Run.runSqlPool
                               @ (Yesod.Core.Types.HandlerFor Foundation.App)
                               @ Database.Persist.Sql.Types.Internal.SqlBackend
                               @ (Database.Persist.Class.PersistEntity.Key Foundation.Pedido)
                               (Yesod.Core.Types.$fMonadUnliftIOHandlerFor @ Foundation.App)
                               Foundation.$fYesodPersistApp2
                                 `cast`
                               (GHC.Classes.(%,%)
                                  <Database.Persist.Class.PersistStore.IsPersistBackend
                                     Database.Persist.Sql.Types.Internal.SqlBackend>_N
                                  ((Data.Type.Equality.~)
                                     <*>_N
                                     (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0]))
                                     <Database.Persist.Sql.Types.Internal.SqlBackend>_N)_N)_R
                               (Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreWriteSqlBackend_$cinsert
                                  @ (Yesod.Core.Types.HandlerFor Foundation.App)
                                  @ Foundation.Pedido
                                  (Yesod.Core.Types.$fMonadIOHandlerFor @ Foundation.App)
                                  Handlers.Cardapio.postCardapioR13
                                    `cast`
                                  (GHC.Classes.(%,%)
                                     <Database.Persist.Class.PersistEntity.PersistEntity
                                        Foundation.Pedido>_N
                                     ((Data.Type.Equality.~)
                                        <*>_N
                                        (Sym (Foundation.D:R:PersistEntityBackendPedido[0]))
                                        (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                                  (case a1 of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                                   case Data.Text.Encoding.$wdecodeUtf8With
                                          Data.Text.Encoding.Error.lenientDecode
                                          ww1
                                          ww2
                                          ww3
                                          ww4 of dt114 { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                   Foundation.Pedido dt114 0.0## 19.0## GHC.Types.False } }))
                               (case r `cast`
                                     (Yesod.Core.Types.HandlerData
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N))
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N)))_R of wild1 { Yesod.Core.Types.HandlerData ds2 ds3 dt114 dt115 ->
                                case ds3 of wild2 { Yesod.Core.Types.RunHandlerEnv ds4 ds5 ds7 ds6 ds8 ds9 ds10 ds11 ds12 ->
                                case ds6
                                       `cast`
                                     (Sub (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                               <Foundation.App>_N)) of wild3 { Foundation.App ds13 ->
                                ds13 } } }))
                              `cast`
                            (Yesod.Core.Types.N:HandlerFor[0]
                                 <Foundation.App>_N
                                 <Database.Persist.Class.PersistEntity.Key Foundation.Pedido>_R)
                              r)
                             `cast`
                           (GHC.Types.N:IO[0]
                                <Database.Persist.Class.PersistEntity.Key Foundation.Pedido>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ((Database.Persist.Sql.Run.runSqlPool
                               @ (Yesod.Core.Types.HandlerFor Foundation.App)
                               @ Database.Persist.Sql.Types.Internal.SqlBackend
                               @ (GHC.Base.Maybe
                                    (Database.Persist.Class.PersistEntity.Entity
                                       Foundation.Produto))
                               (Yesod.Core.Types.$fMonadUnliftIOHandlerFor @ Foundation.App)
                               Foundation.$fYesodPersistApp2
                                 `cast`
                               (GHC.Classes.(%,%)
                                  <Database.Persist.Class.PersistStore.IsPersistBackend
                                     Database.Persist.Sql.Types.Internal.SqlBackend>_N
                                  ((Data.Type.Equality.~)
                                     <*>_N
                                     (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0]))
                                     <Database.Persist.Sql.Types.Internal.SqlBackend>_N)_N)_R
                               Handlers.Cardapio.postCardapioR4
                                 `cast`
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Database.Persist.Sql.Types.Internal.SqlBackend>_R
                                         <Yesod.Core.Types.HandlerFor Foundation.App>_R
                                         <GHC.Base.Maybe
                                            (Database.Persist.Class.PersistEntity.Entity
                                               Foundation.Produto)>_N))
                               (case r `cast`
                                     (Yesod.Core.Types.HandlerData
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N))
                                        (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                  <Foundation.App>_N)))_R of wild1 { Yesod.Core.Types.HandlerData ds3 ds4 dt114 dt115 ->
                                case ds4 of wild2 { Yesod.Core.Types.RunHandlerEnv ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ->
                                case ds8
                                       `cast`
                                     (Sub (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                               <Foundation.App>_N)) of wild3 { Foundation.App ds14 ->
                                ds14 } } }))
                              `cast`
                            (Yesod.Core.Types.N:HandlerFor[0]
                                 <Foundation.App>_N
                                 <GHC.Base.Maybe
                                    (Database.Persist.Class.PersistEntity.Entity
                                       Foundation.Produto)>_R)
                              r)
                             `cast`
                           (GHC.Types.N:IO[0]
                                <GHC.Base.Maybe
                                   (Database.Persist.Class.PersistEntity.Entity
                                      Foundation.Produto)>_R)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case ipv5 of wild1 {
                        GHC.Base.Nothing
                        -> case Handlers.Cardapio.postCardapioR3
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Text.Blaze.Html.Html #)
                           of {}
                        GHC.Base.Just ds4
                        -> case ds4 of wild2 { Database.Persist.Class.PersistEntity.Entity prod produto ->
                           case ((Database.Persist.Sql.Run.runSqlPool
                                    @ (Yesod.Core.Types.HandlerFor Foundation.App)
                                    @ Database.Persist.Sql.Types.Internal.SqlBackend
                                    @ (Database.Persist.Class.PersistEntity.Key
                                         Foundation.ItemPedido)
                                    (Yesod.Core.Types.$fMonadUnliftIOHandlerFor @ Foundation.App)
                                    Foundation.$fYesodPersistApp2
                                      `cast`
                                    (GHC.Classes.(%,%)
                                       <Database.Persist.Class.PersistStore.IsPersistBackend
                                          Database.Persist.Sql.Types.Internal.SqlBackend>_N
                                       ((Data.Type.Equality.~)
                                          <*>_N
                                          (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0]))
                                          <Database.Persist.Sql.Types.Internal.SqlBackend>_N)_N)_R
                                    (Database.Persist.Sql.Orphan.PersistStore.$fPersistStoreWriteSqlBackend_$cinsert
                                       @ (Yesod.Core.Types.HandlerFor Foundation.App)
                                       @ Foundation.ItemPedido
                                       (Yesod.Core.Types.$fMonadIOHandlerFor @ Foundation.App)
                                       Handlers.Cardapio.postCardapioR2
                                         `cast`
                                       (GHC.Classes.(%,%)
                                          <Database.Persist.Class.PersistEntity.PersistEntity
                                             Foundation.ItemPedido>_N
                                          ((Data.Type.Equality.~)
                                             <*>_N
                                             (Sym (Foundation.D:R:PersistEntityBackendItemPedido[0]))
                                             (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                                       (case Handlers.Cardapio.formPedido_x of dt114 { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                        case prod
                                               `cast`
                                             (Foundation.D:R:KeyProduto0[0] ; (Foundation.N:R:KeyProduto[0] ; (Database.Persist.Sql.Orphan.PersistStore.D:R:BackendKeySqlBackend0[0] ; Database.Persist.Sql.Orphan.PersistStore.N:R:BackendKeySqlBackend[0]))) of dt115 { GHC.Int.I64# dt116 ->
                                        Foundation.ItemPedido dt114 dt116 20.0## } }))
                                    (case r `cast`
                                          (Yesod.Core.Types.HandlerData
                                             (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                       <Foundation.App>_N))
                                             (Sym (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                       <Foundation.App>_N)))_R of wild3 { Yesod.Core.Types.HandlerData ds5 ds6 dt114 dt115 ->
                                     case ds6 of wild4 { Yesod.Core.Types.RunHandlerEnv ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                                     case ds10
                                            `cast`
                                          (Sub (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                                    <Foundation.App>_N)) of wild5 { Foundation.App ds16 ->
                                     ds16 } } }))
                                   `cast`
                                 (Yesod.Core.Types.N:HandlerFor[0]
                                      <Foundation.App>_N
                                      <Database.Persist.Class.PersistEntity.Key
                                         Foundation.ItemPedido>_R)
                                   r)
                                  `cast`
                                (GHC.Types.N:IO[0]
                                     <Database.Persist.Class.PersistEntity.Key
                                        Foundation.ItemPedido>_R)
                                  ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                           ((Yesod.Core.Handler.redirect
                               @ (Yesod.Core.Types.HandlerFor Foundation.App)
                               @ (Yesod.Routes.Class.Route Foundation.App)
                               @ Text.Blaze.Html.Html
                               (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                                  @ Foundation.App)
                               (Yesod.Core.Handler.$fRedirectUrlmasterRoute_$ctoTextUrl
                                  @ Foundation.App)
                                 `cast`
                               (Sym (Yesod.Core.Handler.N:RedirectUrl[0]
                                         (Yesod.Core.Class.Handler.D:R:HandlerSiteHandlerFor[0]
                                              <Foundation.App>_N)
                                         <Yesod.Routes.Class.Route Foundation.App>_N))
                               Foundation.CardapioR `cast` (Sym (Foundation.D:R:RouteApp0[0])))
                              `cast`
                            (Yesod.Core.Types.N:HandlerFor[0]
                                 <Foundation.App>_N <Text.Blaze.Html.Html>_R)
                              r)
                             `cast`
                           (GHC.Types.N:IO[0] <Text.Blaze.Html.Html>_R)
                             ipv6 } } } } } } }) -}
bb40ad7843c49e484feec369859bc2ea
  postCardapioR10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("coiso"#) -}
8f39155cea4a13f29af54d31e7bebf03
  postCardapioR11 ::
    Foundation.R:EntityFieldProdutotyp Data.Text.Internal.Text
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Foundation.ProdutoNome
                   @ Data.Text.Internal.Text
                   Handlers.Cardapio.$s$WProdutoNome_$d~~
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.Text.Internal.Text>_N <Data.Text.Internal.Text>_N)) -}
d445cd5eff197e4bce1e210404670d2d
  postCardapioR12 ::
    (Database.Persist.Class.PersistEntity.PersistEntity
       Foundation.Produto,
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
     Data.Type.Equality.~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *))
  {- Strictness: m,
     Unfolding: ((Foundation.$fPersistEntityProduto,
                  Handlers.Cardapio.postCardapioR_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
72f8ac60bf68b8d8f6240ca9316123bb
  postCardapioR13 ::
    (Database.Persist.Class.PersistEntity.PersistEntity
       Foundation.Pedido,
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
     Data.Type.Equality.~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *))
  {- Strictness: m,
     Unfolding: ((Foundation.$fPersistEntityPedido,
                  Handlers.Cardapio.postCardapioR_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
811199c0667d42a45ce5806d29ea4040
  postCardapioR14 ::
    Yesod.Core.Types.HandlerFor Foundation.App Text.Blaze.Html.Html
  {- Strictness: x -}
f752b2b8c5ba3d1893f9893d8d48287c
  postCardapioR15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Cardapio.postCardapioR16) -}
709daa1d7f09baff4c459a7a5506e105
  postCardapioR16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_ID"#) -}
af184b335247ab8467afb4fe2f95d7f3
  postCardapioR2 ::
    (Database.Persist.Class.PersistEntity.PersistEntity
       Foundation.ItemPedido,
     (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
     Data.Type.Equality.~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *))
  {- Strictness: m,
     Unfolding: ((Foundation.$fPersistEntityItemPedido,
                  Handlers.Cardapio.postCardapioR_$d~~
                    `cast`
                  (Sym (Data.Type.Equality.N:~[0]
                            <*>_N) <Database.Persist.Sql.Types.Internal.SqlBackend>_N <Database.Persist.Sql.Types.Internal.SqlBackend>_N))) -}
725edbe1f303e5935128c07ed4fbe75b
  postCardapioR3 ::
    Yesod.Core.Types.HandlerFor
      Foundation.App
      (Database.Persist.Class.PersistEntity.Key Foundation.ItemPedido)
  {- Strictness: x -}
794ac7930aafecf6216b7b5e0bd73d6a
  postCardapioR4 ::
    Database.Persist.Sql.Types.Internal.SqlBackend
    -> Yesod.Core.Types.HandlerFor
         Foundation.App
         (GHC.Base.Maybe
            (Database.Persist.Class.PersistEntity.Entity Foundation.Produto))
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (r1 :: Database.Persist.Sql.Types.Internal.SqlBackend) ->
                 let {
                   ds1 :: Yesod.Core.Types.HandlerFor
                            Foundation.App
                            (Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.ConduitM
                                  ()
                                  (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
                                  GHC.Types.IO
                                  ()))
                   = Handlers.Cardapio.postCardapioR_m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <*>_N
                          <Database.Persist.Sql.Types.Internal.SqlBackend>_R
                          <Yesod.Core.Types.HandlerFor Foundation.App>_R
                          <Data.Acquire.Internal.Acquire
                             (Data.Conduit.Internal.Conduit.ConduitM
                                ()
                                (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
                                GHC.Types.IO
                                ())>_N)
                       r1
                 } in
                 (\ (r :: Yesod.Core.Types.HandlerData
                            Foundation.App Foundation.App)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds1
                          `cast`
                        (Yesod.Core.Types.N:HandlerFor[0]
                             <Foundation.App>_N
                             <Data.Acquire.Internal.Acquire
                                (Data.Conduit.Internal.Conduit.ConduitM
                                   ()
                                   (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
                                   GHC.Types.IO
                                   ())>_R)
                          r)
                         `cast`
                       (GHC.Types.N:IO[0]
                            <Data.Acquire.Internal.Acquire
                               (Data.Conduit.Internal.Conduit.ConduitM
                                  ()
                                  (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
                                  GHC.Types.IO
                                  ())>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  (Data.Acquire.Internal.with
                     @ GHC.Types.IO
                     @ (Data.Conduit.Internal.Conduit.ConduitM
                          ()
                          (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
                          GHC.Types.IO
                          ())
                     @ (GHC.Base.Maybe
                          (Database.Persist.Class.PersistEntity.Entity Foundation.Produto))
                     Control.Monad.IO.Unlift.$fMonadUnliftIOIO
                     ipv1
                     (Database.Persist.Sql.Orphan.PersistQuery.$fPersistQueryReadSqlBackend3
                        @ Foundation.Produto))
                    `cast`
                  (GHC.Types.N:IO[0]
                       <GHC.Base.Maybe
                          (Database.Persist.Class.PersistEntity.Entity
                             Foundation.Produto)>_R)
                    ipv })
                   `cast`
                 ((<Yesod.Core.Types.HandlerData Foundation.App Foundation.App>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <GHC.Base.Maybe
                                    (Database.Persist.Class.PersistEntity.Entity
                                       Foundation.Produto)>_R)) ; Sym (Yesod.Core.Types.N:HandlerFor[0]
                                                                           <Foundation.App>_N
                                                                           <GHC.Base.Maybe
                                                                              (Database.Persist.Class.PersistEntity.Entity
                                                                                 Foundation.Produto)>_R))) -}
0b58a3477b249e8f2cfa2c42504a14de
  postCardapioR5 ::
    [Database.Persist.Class.PersistEntity.SelectOpt Foundation.Produto]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.SelectOpt
                        Foundation.Produto)
                   (Database.Persist.Sql.Orphan.PersistQuery.$fPersistQueryReadSqlBackend1
                      @ Foundation.Produto)
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.SelectOpt
                           Foundation.Produto))) -}
a591f6bd4c5375bc0596d2410604a280
  postCardapioR6 ::
    [Database.Persist.Class.PersistEntity.Filter Foundation.Produto]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Database.Persist.Class.PersistEntity.Filter Foundation.Produto)
                   Handlers.Cardapio.postCardapioR7
                   (GHC.Types.[]
                      @ (Database.Persist.Class.PersistEntity.Filter
                           Foundation.Produto))) -}
1c7b62ce481fd1758b5c72a070a60648
  postCardapioR7 ::
    Database.Persist.Class.PersistEntity.Filter Foundation.Produto
  {- Unfolding: (Database.Persist.Class.PersistEntity.Filter
                   @ Foundation.Produto
                   @ Data.Text.Internal.Text
                   Database.Persist.Class.PersistField.$fPersistFieldText0
                   Handlers.Cardapio.postCardapioR11
                     `cast`
                   (Sym (Foundation.D:R:EntityFieldProdutotyp0[0]) <Data.Text.Internal.Text>_N)
                   Handlers.Cardapio.postCardapioR8
                   Database.Persist.Types.Base.Eq) -}
33d996933ff62c2129315999a9dce7af
  postCardapioR8 ::
    Data.Either.Either
      Data.Text.Internal.Text [Data.Text.Internal.Text]
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Data.Text.Internal.Text
                   @ [Data.Text.Internal.Text]
                   Handlers.Cardapio.postCardapioR9) -}
f3cff530bd66db26e6e2a56e7c15237a
  postCardapioR9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Handlers.Cardapio.postCardapioR10) -}
fca6d9e744418e2dba93754e429c8a90
  postCardapioR_$d~~ ::
    (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
    GHC.Types.~~ (Database.Persist.Sql.Types.Internal.SqlBackend :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @ Database.Persist.Sql.Types.Internal.SqlBackend
                   @~ <Database.Persist.Sql.Types.Internal.SqlBackend>_N) -}
c5a031b0c30983756ae9b8103d332e22
  postCardapioR_ds ::
    Yesod.Core.Types.HandlerFor
      Foundation.App (GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Unfolding: (Yesod.Core.Handler.lookupSessionBS
                   @ (Yesod.Core.Types.HandlerFor Foundation.App)
                   (Yesod.Core.Class.Handler.$fMonadHandlerHandlerFor
                      @ Foundation.App)
                   Handlers.Cardapio.postCardapioR15) -}
aaebbe92897f2e6f0add295ef88455c8
  postCardapioR_m1 ::
    Control.Monad.Trans.Reader.ReaderT
      Database.Persist.Sql.Types.Internal.SqlBackend
      (Yesod.Core.Types.HandlerFor Foundation.App)
      (Data.Acquire.Internal.Acquire
         (Data.Conduit.Internal.Conduit.ConduitM
            ()
            (Database.Persist.Class.PersistEntity.Entity Foundation.Produto)
            GHC.Types.IO
            ()))
  {- Unfolding: (Database.Persist.Sql.Orphan.PersistQuery.$fPersistQueryReadSqlBackend_$cselectSourceRes
                   @ Foundation.Produto
                   @ (Yesod.Core.Types.HandlerFor Foundation.App)
                   @ GHC.Types.IO
                   Handlers.Cardapio.postCardapioR12
                     `cast`
                   (GHC.Classes.(%,%)
                      <Database.Persist.Class.PersistEntity.PersistEntity
                         Foundation.Produto>_N
                      ((Data.Type.Equality.~)
                         <*>_N
                         (Sym (Foundation.D:R:PersistEntityBackendProduto[0]))
                         (Sym (Database.Persist.Sql.Types.Internal.D:R:BaseBackendSqlBackend[0])))_N)_R
                   (Yesod.Core.Types.$fMonadIOHandlerFor @ Foundation.App)
                   Control.Monad.IO.Class.$fMonadIOIO
                   Handlers.Cardapio.postCardapioR6
                   Handlers.Cardapio.postCardapioR5) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

